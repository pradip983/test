<h1 className="text-4xl bg-center bg-cover  font-bold mb-6">{cdestination.name || cdestination.title}</h1>
<img
  src={cdestination.image}
  alt={cdestination.name}
  className="w-full h-96 object-cover rounded-lg mb-8 "
/>
<p className="text-lg text-gray-700">{cdestination.description || 'No description available'}</p>



<input
              id="name"
              type="text"
              value={formData.name}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
              className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              placeholder="Enter your name"
              required
            />

            "use client"
import { useState } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { useRef } from "react";
import { useEffect } from "react";

const reviewsData = [
  {
    name: "John Doe",
    comment: "Amazing place! Had a wonderful experience with my family.",
    img:"/agra.jpg"
  },
  {
    name: "Jane Smith",
    comment: "The scenery was breathtaking, and the local food was delicious!",
    img:"/agra.jpg"
  },
  {
    name: "Jane Smith",
    comment: "The scenery was breathtaking, and the local food was delicious!",
    img:"/agra.jpg"
  },
  {
    name: "Jane Smith",
    comment: "The scenery was breathtaking, and the local food was delicious!",
    img:"/agra.jpg"
  },
  {
    name: "Jane Smith",
    comment: "The scenery was breathtaking, and the local food was delicious!",
    img:"/agra.jpg"
  },
  {
    name: "Jane Smith",
    comment: "The scenery was breathtaking, and the local food was delicious!",
    img:"/agra.jpg"
  },
];

export default function Review( { reviewsData } ) {
  const [reviews, setReviews] = useState(reviewsData);
  const [isFormVisible, setIsFormVisible] = useState(false);
    const [loading, setLoading] = useState(false);
  const { data: session } = useSession()
  const Router = useRouter();
  const [formData, setFormData] = useState({
    name: session?.user?.username || "Anonymous",
    comment: "",
    img: "/agra.jpg",
  });

  const reviewsContainerRef = useRef(null);

  useEffect(() => {
    if (reviewsContainerRef.current) {
      reviewsContainerRef.current.scrollTop = reviewsContainerRef.current.scrollHeight;
    }
  }, [reviews]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (formData.name && formData.comment && formData.img) {
      setReviews([...reviews, formData]); // Add new review
      setFormData({ ...formData, comment: "" }); // Reset comment field
      setIsFormVisible(false); // Hide form after submission
    }
  };

  const handlehome = ()=> {
    setLoading(true);
   Router.push("/")
  };


if(session){
  return (
<>
   {!isFormVisible && <div className=" w-full  h-full bg-gray-50 p-4 flex flex-col gap-4 overflow-y-auto items-center">
      {/* Page Header */}
      <header className="w-full max-w-4xl text-center ">
        <h1 className="text-4xl font-extrabold text-gray-800">Reviews</h1>
        <p className="text-lg text-gray-600 mt-2">
          Share your experience or read reviews from others!
        </p>
      </header>

      {/* Reviews Section */}
      <div  ref={reviewsContainerRef} className="w-full shadow-2xl  rounded-lg overflow-y-auto hide-scrollbar">
        <div className="w-full max-w-5xl  mx-auto">
          {reviews.length > 0 ? (
            reviews.map((review, index) => (
              <div
                key={index}
                className={`p-4 flex ${index % 2 === 0 ? "justify-start" : "justify-end"}`
                }
              >

                <div className="border-2 min-w-[500px] p-2 rounded-lg border-gray-200 bg-white shadow-md">

                  <div className="flex gap-3 justify-start items-center">
                    <div className="relative w-8 h-8 overflow-hidden rounded-full transform transition-transform">
                      <img
                        src={review.img}
                        alt="Avatar"
                        className="object-cover w-full h-full"
                      />
                    </div>
                    <div>
                      <h3 className="text-lg font-semibold text-gray-800">
                        {review.name}
                      </h3>
                    </div>
                  </div>
                  <p className="text-gray-600 p-2">{review.comment}</p>
                </div>

              </div>
            ))
          ) : (
            <p className="text-gray-600 text-center p-4">
              No reviews yet. Be the first to leave one!
            </p>
          )}
        </div>
      </div>

      {/* Sticky Button */}
      <div>
        <button
          className="rounded-full shadow-lg hover:bg-blue-700   inline-block px-6 py-3 bg-[#364657] text-white font-bold    transition duration-200"
          onClick={() => setIsFormVisible(true)}
        >
          Give Review
        </button>
      </div>
    </div >
}
    
    { isFormVisible ? (<div className="w-full max-w-4xl mx-auto mt-6">
      <form
        onSubmit={handleSubmit}
        className="bg-white p-6 rounded-lg shadow-md border border-gray-200"
      >
        <h2 className="text-2xl font-bold text-gray-800 mb-4">
          Write a Review
        </h2>
        <div className="mb-4 flex gap-3 ">
          <div className="relative w-8 h-8 ml-4 overflow-hidden rounded-full transform transition-transform">
            <img
              src="/agra.jpg"
              alt="Avatar"
              layout="fill"

            />
          </div>
          <div

            className="block text-lg  font-bold text-gray-700"
          >
           {session.user.username}
          </div>

        </div>
        <div className="mb-4">
          <label
            htmlFor="comment"
            className="block text-sm font-medium mb-2 ml-4 text-gray-700"
          >
            Your Review
          </label>
          <textarea
            id="comment"
            value={formData.comment}
            onChange={(e) =>
              setFormData({ ...formData, comment: e.target.value })
            }
            className="mt-1 p-4  w-full  rounded-md shadow-2xl  sm:text-sm"
            placeholder="Write your review here"
            rows="4"
            required
          ></textarea>
        </div>
        <button
          type="submit"
          className=" shadow-lg  inline-block  bg-[#364657] text-white font-bold  duration-200 px-6 py-2  rounded-md  hover:bg-blue-700 transition"
        >
          Submit Review
        </button>
      </form>
    </div>

  ): ("")}

  </>
);
}
else{
  return (
    <>
      <div className="flex w-full h-[75vh] items-center justify-center px-6 py-12 lg:px-8">
        <div className="w-[45vw] h-[55vh] border-4 border-gray-50 rounded-lg shadow-2xl">
          <div className="sm:mx-auto sm:w-full">
            <h2 className="mt-10 text-center text-3xl font-bold tracking-tight text-gray-900">
              Sign in of your account
            </h2>
          </div>

          <div className="mt-14 sm:mx-auto sm:w-[50%]">
            <div className="mt-5">
              <button
                onClick={handlehome}
                disabled={loading}
                className={`flex w-full justify-center rounded-md px-3 py-1.5 text-sm font-semibold text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 ${
                  loading
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-indigo-600 hover:bg-indigo-500 focus-visible:outline-indigo-600"
                }`}
              >
                {loading ? "Redirect" : "Home"}
              </button>
            </div>

            <p className="mt-5 text-center text-sm text-gray-500">
              Register and Explore India?
            </p>
          </div>
        </div>
      </div>
    
    </>
  );
}

}


<div className=" w-[90vw] h-[43vh] overflow-hidden overflow-x-scroll hide-scrollbar flex space-x-4 px-4">
{topSearches.map((item, index) => (
  <div
    key={index}
    className="bg-white min-w-[200px] shadow-lg rounded-lg overflow-hidden hover:shadow-xl transition-shadow duration-300"
  >
    <div className="relative w-full h-48">
      <img
        src={item.img}
        alt={item.name}
        className="w-full h-full object-cover"
      />
    </div>
    <div className="p-4">
      <h2 className="text-xl font-semibold text-gray-800">
        {item.name}
      </h2>
      <p className="text-gray-600 mt-2 text-sm">{item.description}</p>
    </div>
  </div>
))}
</div>

mongodb+srv://vasanpradip06:vasan51645@cluster0.mdlqm.mongodb.net/
//MONGO_URI=mongodb://localhost:27017/ExploreIND
mongodb+srv://vasanpradip06:vasan51645@cluster0.mdlqm.mongodb.net/

import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import { dbConnect } from '@/lib/dbconnect';
import User from '@/models/User';

export const authOptions = {

  secret: process.env.NEXTAUTH_SECRET,

  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        username: { label: "Username", type: "text", placeholder: "username" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        try {
          await dbConnect();
          

          const user = await User.findOne({ username: credentials.username });
          

          if (!user) {
           
            throw new Error("Invalid username or password");
          }

          // Directly compare passwords (only for testing; NOT secure for production)
          if (user.password !== credentials.password) {
           
            throw new Error("Invalid username or password");
          }

          // Return user data to be stored in the token
          return { id: user._id.toString(), username: user.username };
        } catch (error) {
         
          throw error;
        }
      },
    }),
  ],
  callbacks: {
    async session({ session, token }) {
      

      if (token) {
        session.user = {
          id: token.id,
          username: token.username,
        };
      }

      return session;
    },
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.username = user.username;
      }
      return token;
    },
  },
  session: {
    strategy: "jwt", // Change to "jwt" to support CredentialsProvider
  },
 
};

export const GET = NextAuth(authOptions);
export const POST = NextAuth(authOptions);



// app/api/signin/route.js


import User from "@/models/User";
import { dbConnect } from "@/lib/dbconnect";


// Named export for POST method (handles sign-in)
export async function POST(req) {
  // Parse JSON body
  const { username, password } = await req.json();

  // Ensure the username and password are provided
  if (!username || !password) {
    return new Response(
      JSON.stringify({ error: "Username and password are required" }),
      { status: 400 }
    );
  }

  try {
    // Connect to the database
    await dbConnect();

    // Find the user by username
    const user = await User.findOne({ username });
    if (!user || user.password !== password) {
      return new Response(
        JSON.stringify({ error: "Invalid credentials" }),
        { status: 401 }
      );
    }

    // Set the cookie with user session information (HttpOnly)
    const headers = new Headers();
    headers.set("Set-Cookie", `user=${user.username}; HttpOnly; Path=/; Max-Age=3600;`);

    // Return a success response with message
    return new Response(
      JSON.stringify({ message: "Signed in successfully" }),
      { status: 200, headers }
    );
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 400 }
    );
  }
}



// app/api/signup/route.js

import User from "@/models/User";
import { dbConnect } from "@/lib/dbconnect";

export async function POST(req) {
  // Parse the incoming request body
  const { username, password } = await req.json();

  // Validate input fields
  if (!username || !password) {
    return new Response(
      JSON.stringify({ error: "Username and password are required" }),
      { status: 400 } // Bad Request
    );
  }

  try {
    // Connect to the database
    await dbConnect();

    // Check if the username already exists in the database
    const existingUser = await User.findOne({ username });

    if (existingUser) {
      return new Response(
        JSON.stringify({ error: "Username already exists. Please choose another username." }),
        { status: 409 } // Conflict
      );
    }

    // Create a new user instance
    const user = new User({
      username,
      password, // Note: Hash the password in a real application
    });

    // Save the new user to the database
    await user.save();

    // Set a cookie for the newly signed-up user
    const headers = new Headers();
    headers.set("Set-Cookie", `user=${user.username}; HttpOnly; Path=/; Max-Age=3600;`);

    // Return a success response
    return new Response(
      JSON.stringify({ message: "User created successfully" }),
      { status: 201, headers }
    );

  } catch (error) {
    // Handle any unexpected errors
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500 } // Internal Server Error
    );
  }
}
